
carAPP_StaticDesign.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000be2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000be2  00000c76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800062  00800062  00000c78  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ca8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021ab  00000000  00000000  00000f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fbd  00000000  00000000  000030c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001505  00000000  00000000  00004084  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000051c  00000000  00000000  0000558c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000881  00000000  00000000  00005aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bf6  00000000  00000000  00006329  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00007f1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 a2 01 	jmp	0x344	; 0x344 <__vector_1>
   8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__vector_2>
   c:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__vector_3>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 ca 02 	jmp	0x594	; 0x594 <__vector_11>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	3a 05       	cpc	r19, r10
  56:	3e 05       	cpc	r19, r14
  58:	43 05       	cpc	r20, r3
  5a:	48 05       	cpc	r20, r8
  5c:	4d 05       	cpc	r20, r13
  5e:	52 05       	cpc	r21, r2
  60:	57 05       	cpc	r21, r7
  62:	5c 05       	cpc	r21, r12

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e2 ee       	ldi	r30, 0xE2	; 226
  78:	fb e0       	ldi	r31, 0x0B	; 11
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	a2 e6       	ldi	r26, 0x62	; 98
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a7 37       	cpi	r26, 0x77	; 119
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 db 02 	call	0x5b6	; 0x5b6 <main>
  9a:	0c 94 ef 05 	jmp	0xbde	; 0xbde <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <Car_SM_Init>:
ERROR_STATUS Car_SM_Init(void)
{
	ERROR_STATUS status = E_OK;
	
		/* initialize steering and Ultrasonic */
		status = Steering_Init();
  a2:	0e 94 da 03 	call	0x7b4	; 0x7b4 <Steering_Init>
		status = Us_Init();
  a6:	0e 94 a3 05 	call	0xb46	; 0xb46 <Us_Init>
	
	return status;
}
  aa:	08 95       	ret

000000ac <Car_SM_Update>:
*/



ERROR_STATUS Car_SM_Update(void)
{
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	00 d0       	rcall	.+0      	; 0xb2 <Car_SM_Update+0x6>
  b2:	1f 92       	push	r1
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATUS status = E_OK;
	
			DIO_Cfg_s fio={
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	89 83       	std	Y+1, r24	; 0x01
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	8a 83       	std	Y+2, r24	; 0x02
  c0:	8b 83       	std	Y+3, r24	; 0x03
				GPIOC,
				FULL_PORT,
				OUTPUT
			};
			DIO_init(&fio);
  c2:	ce 01       	movw	r24, r28
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_init>
		
		else if((gu8_Distance >= 30) && (gu8_Distance <= 35))
		gu8_State = Right;
		
		else if(gu8_Distance >= 35 )
		gu8_State = Move;
  ca:	01 e0       	ldi	r16, 0x01	; 1
		DIO_Write(GPIOC, FULL_PORT, gu8_Distance );
		
		/* Decide Which State To Move Our System Into */
		
		if(gu8_Distance < 30 )
			gu8_State = Back;
  cc:	14 e0       	ldi	r17, 0x04	; 4

	while(1)
	{
		/* Read The Distance From The Ultrasonic Using swICU */
		
		Us_Trigger();
  ce:	0e 94 c3 05 	call	0xb86	; 0xb86 <Us_Trigger>
		softwareDelayMs(1);
  d2:	61 e0       	ldi	r22, 0x01	; 1
  d4:	70 e0       	ldi	r23, 0x00	; 0
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 b8 03 	call	0x770	; 0x770 <softwareDelayMs>
		 
		 Us_GetDistance(&gu8_Distance);
  de:	82 e6       	ldi	r24, 0x62	; 98
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 d4 05 	call	0xba8	; 0xba8 <Us_GetDistance>
		
		DIO_Write(GPIOC, FULL_PORT, gu8_Distance );
  e6:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__data_end>
  ea:	6f ef       	ldi	r22, 0xFF	; 255
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	0e 94 04 01 	call	0x208	; 0x208 <DIO_Write>
		
		/* Decide Which State To Move Our System Into */
		
		if(gu8_Distance < 30 )
  f2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  f6:	8e 31       	cpi	r24, 0x1E	; 30
  f8:	38 f4       	brcc	.+14     	; 0x108 <Car_SM_Update+0x5c>
			gu8_State = Back;
  fa:	10 93 63 00 	sts	0x0063, r17	; 0x800063 <gu8_State>
			case Move:
					Steering_SteerCar(CAR_FORWARD, gu8_Speed);
					break;
			
			case Back:
					Steering_SteerCar(CAR_BACKWARD, gu8_Speed);
  fe:	69 e1       	ldi	r22, 0x19	; 25
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <Steering_SteerCar>
					break;
 106:	1b c0       	rjmp	.+54     	; 0x13e <Car_SM_Update+0x92>
		/* Decide Which State To Move Our System Into */
		
		if(gu8_Distance < 30 )
			gu8_State = Back;
		
		else if((gu8_Distance >= 30) && (gu8_Distance <= 35))
 108:	92 ee       	ldi	r25, 0xE2	; 226
 10a:	98 0f       	add	r25, r24
 10c:	96 30       	cpi	r25, 0x06	; 6
 10e:	40 f4       	brcc	.+16     	; 0x120 <Car_SM_Update+0x74>
		gu8_State = Right;
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <gu8_State>
			case Back:
					Steering_SteerCar(CAR_BACKWARD, gu8_Speed);
					break;
			
			case Right:
					Steering_SteerCar(CAR_RIGHT, gu8_Speed);
 116:	69 e1       	ldi	r22, 0x19	; 25
 118:	83 e0       	ldi	r24, 0x03	; 3
 11a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <Steering_SteerCar>
					break;
 11e:	0f c0       	rjmp	.+30     	; 0x13e <Car_SM_Update+0x92>
			gu8_State = Back;
		
		else if((gu8_Distance >= 30) && (gu8_Distance <= 35))
		gu8_State = Right;
		
		else if(gu8_Distance >= 35 )
 120:	83 32       	cpi	r24, 0x23	; 35
 122:	38 f0       	brcs	.+14     	; 0x132 <Car_SM_Update+0x86>
		gu8_State = Move;
 124:	00 93 63 00 	sts	0x0063, r16	; 0x800063 <gu8_State>
		/* State-Machine Transitions */
		
		switch(gu8_State)
		{
			case Move:
					Steering_SteerCar(CAR_FORWARD, gu8_Speed);
 128:	69 e1       	ldi	r22, 0x19	; 25
 12a:	80 2f       	mov	r24, r16
 12c:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <Steering_SteerCar>
					break;
 130:	06 c0       	rjmp	.+12     	; 0x13e <Car_SM_Update+0x92>
		
		else if(gu8_Distance >= 35 )
		gu8_State = Move;
		
		else
		gu8_State = Stop;
 132:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <gu8_State>
			case Left:
					Steering_SteerCar(CAR_LEFT, gu8_Speed);
					break;
			
			default:
					Steering_SteerCar(CAR_STOP, gu8_Speed);
 136:	69 e1       	ldi	r22, 0x19	; 25
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <Steering_SteerCar>
			
		}
		softwareDelayMs(30);
 13e:	6e e1       	ldi	r22, 0x1E	; 30
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 b8 03 	call	0x770	; 0x770 <softwareDelayMs>
	}
 14a:	c1 cf       	rjmp	.-126    	; 0xce <Car_SM_Update+0x22>

0000014c <DIO_init>:
*/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info){
	
	ERROR_STATUS u8_status = E_OK;
	
	if (DIO_info == NULL)
 14c:	00 97       	sbiw	r24, 0x00	; 0
 14e:	09 f4       	brne	.+2      	; 0x152 <DIO_init+0x6>
 150:	55 c0       	rjmp	.+170    	; 0x1fc <DIO_init+0xb0>
	{
		u8_status = E_NOK;
	}else{
			if (!(DIO_info->GPIO >= GPIOA && DIO_info->GPIO <= GPIOD))
 152:	fc 01       	movw	r30, r24
 154:	20 81       	ld	r18, Z
 156:	24 30       	cpi	r18, 0x04	; 4
 158:	08 f0       	brcs	.+2      	; 0x15c <DIO_init+0x10>
 15a:	52 c0       	rjmp	.+164    	; 0x200 <DIO_init+0xb4>
			{
				u8_status = E_NOK;
			}else
			{
			switch(DIO_info->GPIO){
 15c:	21 30       	cpi	r18, 0x01	; 1
 15e:	c1 f0       	breq	.+48     	; 0x190 <DIO_init+0x44>
 160:	28 f0       	brcs	.+10     	; 0x16c <DIO_init+0x20>
 162:	22 30       	cpi	r18, 0x02	; 2
 164:	39 f1       	breq	.+78     	; 0x1b4 <DIO_init+0x68>
 166:	23 30       	cpi	r18, 0x03	; 3
 168:	b9 f1       	breq	.+110    	; 0x1d8 <DIO_init+0x8c>
 16a:	4c c0       	rjmp	.+152    	; 0x204 <DIO_init+0xb8>
				
				case 0:
				if ( DIO_info->dir == INPUT )
 16c:	fc 01       	movw	r30, r24
 16e:	22 81       	ldd	r18, Z+2	; 0x02
 170:	21 11       	cpse	r18, r1
 172:	07 c0       	rjmp	.+14     	; 0x182 <DIO_init+0x36>
				{
					PORTA_DIR &= ~(DIO_info->pins); //clear the bits to be inputs
 174:	2a b3       	in	r18, 0x1a	; 26
 176:	81 81       	ldd	r24, Z+1	; 0x01
 178:	80 95       	com	r24
 17a:	82 23       	and	r24, r18
 17c:	8a bb       	out	0x1a, r24	; 26
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info){
	
	ERROR_STATUS u8_status = E_OK;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	08 95       	ret
				if ( DIO_info->dir == INPUT )
				{
					PORTA_DIR &= ~(DIO_info->pins); //clear the bits to be inputs
				}
				else{
					PORTA_DIR |= DIO_info->pins;
 182:	2a b3       	in	r18, 0x1a	; 26
 184:	fc 01       	movw	r30, r24
 186:	81 81       	ldd	r24, Z+1	; 0x01
 188:	82 2b       	or	r24, r18
 18a:	8a bb       	out	0x1a, r24	; 26
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info){
	
	ERROR_STATUS u8_status = E_OK;
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	08 95       	ret
				}
				
				break;
				
				case 1:
				if ( DIO_info->dir == INPUT )
 190:	fc 01       	movw	r30, r24
 192:	22 81       	ldd	r18, Z+2	; 0x02
 194:	21 11       	cpse	r18, r1
 196:	07 c0       	rjmp	.+14     	; 0x1a6 <DIO_init+0x5a>
				{
					PORTB_DIR &= ~(DIO_info->pins); //clear the bits to be inputs
 198:	27 b3       	in	r18, 0x17	; 23
 19a:	81 81       	ldd	r24, Z+1	; 0x01
 19c:	80 95       	com	r24
 19e:	82 23       	and	r24, r18
 1a0:	87 bb       	out	0x17, r24	; 23
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info){
	
	ERROR_STATUS u8_status = E_OK;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	08 95       	ret
				if ( DIO_info->dir == INPUT )
				{
					PORTB_DIR &= ~(DIO_info->pins); //clear the bits to be inputs
				}
				else{
					PORTB_DIR |= DIO_info->pins;
 1a6:	27 b3       	in	r18, 0x17	; 23
 1a8:	fc 01       	movw	r30, r24
 1aa:	81 81       	ldd	r24, Z+1	; 0x01
 1ac:	82 2b       	or	r24, r18
 1ae:	87 bb       	out	0x17, r24	; 23
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info){
	
	ERROR_STATUS u8_status = E_OK;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	08 95       	ret
				}
				
				break;
				
				case 2:
				if ( DIO_info->dir == INPUT )
 1b4:	fc 01       	movw	r30, r24
 1b6:	22 81       	ldd	r18, Z+2	; 0x02
 1b8:	21 11       	cpse	r18, r1
 1ba:	07 c0       	rjmp	.+14     	; 0x1ca <DIO_init+0x7e>
				{
					PORTC_DIR &= ~(DIO_info->pins); //clear the bits to be inputs
 1bc:	24 b3       	in	r18, 0x14	; 20
 1be:	81 81       	ldd	r24, Z+1	; 0x01
 1c0:	80 95       	com	r24
 1c2:	82 23       	and	r24, r18
 1c4:	84 bb       	out	0x14, r24	; 20
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info){
	
	ERROR_STATUS u8_status = E_OK;
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	08 95       	ret
				if ( DIO_info->dir == INPUT )
				{
					PORTC_DIR &= ~(DIO_info->pins); //clear the bits to be inputs
				}
				else{
					PORTC_DIR |= DIO_info->pins;
 1ca:	24 b3       	in	r18, 0x14	; 20
 1cc:	fc 01       	movw	r30, r24
 1ce:	81 81       	ldd	r24, Z+1	; 0x01
 1d0:	82 2b       	or	r24, r18
 1d2:	84 bb       	out	0x14, r24	; 20
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info){
	
	ERROR_STATUS u8_status = E_OK;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	08 95       	ret
				}
				
				break;
				
				case 3:
				if ( DIO_info->dir == INPUT )
 1d8:	fc 01       	movw	r30, r24
 1da:	22 81       	ldd	r18, Z+2	; 0x02
 1dc:	21 11       	cpse	r18, r1
 1de:	07 c0       	rjmp	.+14     	; 0x1ee <DIO_init+0xa2>
				{
					PORTD_DIR &= ~(DIO_info->pins); //clear the bits to be inputs
 1e0:	21 b3       	in	r18, 0x11	; 17
 1e2:	81 81       	ldd	r24, Z+1	; 0x01
 1e4:	80 95       	com	r24
 1e6:	82 23       	and	r24, r18
 1e8:	81 bb       	out	0x11, r24	; 17
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info){
	
	ERROR_STATUS u8_status = E_OK;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	08 95       	ret
				if ( DIO_info->dir == INPUT )
				{
					PORTD_DIR &= ~(DIO_info->pins); //clear the bits to be inputs
				}
				else{
					PORTD_DIR |= DIO_info->pins;
 1ee:	21 b3       	in	r18, 0x11	; 17
 1f0:	fc 01       	movw	r30, r24
 1f2:	81 81       	ldd	r24, Z+1	; 0x01
 1f4:	82 2b       	or	r24, r18
 1f6:	81 bb       	out	0x11, r24	; 17
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info){
	
	ERROR_STATUS u8_status = E_OK;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	08 95       	ret
	
	if (DIO_info == NULL)
	{
		u8_status = E_NOK;
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	08 95       	ret
	}else{
			if (!(DIO_info->GPIO >= GPIOA && DIO_info->GPIO <= GPIOD))
			{
				u8_status = E_NOK;
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	08 95       	ret
				}
				
				break;
				
				default:
				u8_status = E_NOK;
 204:	80 e0       	ldi	r24, 0x00	; 0
		}/* END OF ELSE */
		
	}/* END OF outer ELSE */
	
	return u8_status;
}
 206:	08 95       	ret

00000208 <DIO_Write>:
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t u8_pins, uint8_t u8_value){
	
		ERROR_STATUS u8_status = E_OK;
		
			if (!(GPIO >= GPIOA && GPIO <= GPIOD) /*|| !(u8_pins >=0 && u8_pins <=7)*/)
 208:	84 30       	cpi	r24, 0x04	; 4
 20a:	08 f0       	brcs	.+2      	; 0x20e <DIO_Write+0x6>
 20c:	40 c0       	rjmp	.+128    	; 0x28e <DIO_Write+0x86>
			{
				u8_status = E_NOK;
				
			}else{
				
	       switch(GPIO){
 20e:	81 30       	cpi	r24, 0x01	; 1
 210:	a1 f0       	breq	.+40     	; 0x23a <DIO_Write+0x32>
 212:	28 f0       	brcs	.+10     	; 0x21e <DIO_Write+0x16>
 214:	82 30       	cpi	r24, 0x02	; 2
 216:	f9 f0       	breq	.+62     	; 0x256 <DIO_Write+0x4e>
 218:	83 30       	cpi	r24, 0x03	; 3
 21a:	59 f1       	breq	.+86     	; 0x272 <DIO_Write+0x6a>
 21c:	3a c0       	rjmp	.+116    	; 0x292 <DIO_Write+0x8a>
		      
		      case GPIOA:

		               if(u8_value == LOW)
 21e:	41 11       	cpse	r20, r1
 220:	06 c0       	rjmp	.+12     	; 0x22e <DIO_Write+0x26>
		               {
			               PORTA_DATA &= ~(u8_pins);
 222:	8b b3       	in	r24, 0x1b	; 27
 224:	60 95       	com	r22
 226:	68 23       	and	r22, r24
 228:	6b bb       	out	0x1b, r22	; 27
*Description: This function can set the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t u8_pins, uint8_t u8_value){
	
		ERROR_STATUS u8_status = E_OK;
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	08 95       	ret
		               {
			               PORTA_DATA &= ~(u8_pins);
		               }
		               else
		               {
			               PORTA_DATA |= (u8_pins & u8_value);
 22e:	8b b3       	in	r24, 0x1b	; 27
 230:	64 23       	and	r22, r20
 232:	68 2b       	or	r22, r24
 234:	6b bb       	out	0x1b, r22	; 27
*Description: This function can set the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t u8_pins, uint8_t u8_value){
	
		ERROR_STATUS u8_status = E_OK;
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	08 95       	ret
		               }
		               break;

		      case GPIOB:
			  
		               if(u8_value == LOW)
 23a:	41 11       	cpse	r20, r1
 23c:	06 c0       	rjmp	.+12     	; 0x24a <DIO_Write+0x42>
		               {
			               PORTB_DATA &= ~(u8_pins);
 23e:	88 b3       	in	r24, 0x18	; 24
 240:	60 95       	com	r22
 242:	68 23       	and	r22, r24
 244:	68 bb       	out	0x18, r22	; 24
*Description: This function can set the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t u8_pins, uint8_t u8_value){
	
		ERROR_STATUS u8_status = E_OK;
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	08 95       	ret
		               {
			               PORTB_DATA &= ~(u8_pins);
		               }
		               else
		               {
			               PORTB_DATA |= (u8_pins & u8_value);
 24a:	88 b3       	in	r24, 0x18	; 24
 24c:	64 23       	and	r22, r20
 24e:	68 2b       	or	r22, r24
 250:	68 bb       	out	0x18, r22	; 24
*Description: This function can set the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t u8_pins, uint8_t u8_value){
	
		ERROR_STATUS u8_status = E_OK;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	08 95       	ret
		               }
		               break;
			  
		      case GPIOC:
			  
		               if(u8_value == LOW)
 256:	41 11       	cpse	r20, r1
 258:	06 c0       	rjmp	.+12     	; 0x266 <DIO_Write+0x5e>
		               {
			               PORTC_DATA &= ~(u8_pins);
 25a:	85 b3       	in	r24, 0x15	; 21
 25c:	60 95       	com	r22
 25e:	68 23       	and	r22, r24
 260:	65 bb       	out	0x15, r22	; 21
*Description: This function can set the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t u8_pins, uint8_t u8_value){
	
		ERROR_STATUS u8_status = E_OK;
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	08 95       	ret
		               {
			               PORTC_DATA &= ~(u8_pins);
		               }
		               else
		               {
			               PORTC_DATA |= (u8_pins & u8_value);
 266:	85 b3       	in	r24, 0x15	; 21
 268:	64 23       	and	r22, r20
 26a:	68 2b       	or	r22, r24
 26c:	65 bb       	out	0x15, r22	; 21
*Description: This function can set the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t u8_pins, uint8_t u8_value){
	
		ERROR_STATUS u8_status = E_OK;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	08 95       	ret
		               }
		               break;

		      case GPIOD:
			  
		               if(u8_value == LOW)
 272:	41 11       	cpse	r20, r1
 274:	06 c0       	rjmp	.+12     	; 0x282 <DIO_Write+0x7a>
		               {
			               PORTD_DATA &= ~(u8_pins);
 276:	82 b3       	in	r24, 0x12	; 18
 278:	60 95       	com	r22
 27a:	68 23       	and	r22, r24
 27c:	62 bb       	out	0x12, r22	; 18
*Description: This function can set the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t u8_pins, uint8_t u8_value){
	
		ERROR_STATUS u8_status = E_OK;
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	08 95       	ret
		               {
			               PORTD_DATA &= ~(u8_pins);
		               }
		               else
		               {
			               PORTD_DATA |= (u8_pins & u8_value);
 282:	82 b3       	in	r24, 0x12	; 18
 284:	64 23       	and	r22, r20
 286:	68 2b       	or	r22, r24
 288:	62 bb       	out	0x12, r22	; 18
*Description: This function can set the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t u8_pins, uint8_t u8_value){
	
		ERROR_STATUS u8_status = E_OK;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	08 95       	ret
		
			if (!(GPIO >= GPIOA && GPIO <= GPIOD) /*|| !(u8_pins >=0 && u8_pins <=7)*/)
			{
				u8_status = E_NOK;
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	08 95       	ret
			               PORTD_DATA |= (u8_pins & u8_value);
		               }
		               break;

		      default:
					u8_status = E_NOK;
 292:	80 e0       	ldi	r24, 0x00	; 0
	  }
	  
	 } /* end of else */
	return u8_status;	
}
 294:	08 95       	ret

00000296 <EXT_INT_SetEdge>:

/* callback implementation */ 

void set_callback(void ptrToFunction(void)){
	
		ExtInt_CBK_Ptr[EXT_INT2] = ptrToFunction;
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	29 f4       	brne	.+10     	; 0x2a4 <EXT_INT_SetEdge+0xe>
 29a:	84 b7       	in	r24, 0x34	; 52
 29c:	80 64       	ori	r24, 0x40	; 64
 29e:	84 bf       	out	0x34, r24	; 52
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	08 95       	ret
 2a4:	81 11       	cpse	r24, r1
 2a6:	05 c0       	rjmp	.+10     	; 0x2b2 <EXT_INT_SetEdge+0x1c>
 2a8:	84 b7       	in	r24, 0x34	; 52
 2aa:	8f 7b       	andi	r24, 0xBF	; 191
 2ac:	84 bf       	out	0x34, r24	; 52
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	08 95       	ret
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	08 95       	ret

000002b6 <EXT_INT_Enable>:
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	00 d0       	rcall	.+0      	; 0x2bc <EXT_INT_Enable+0x6>
 2bc:	1f 92       	push	r1
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	41 f0       	breq	.+16     	; 0x2d6 <EXT_INT_Enable+0x20>
 2c6:	18 f0       	brcs	.+6      	; 0x2ce <EXT_INT_Enable+0x18>
 2c8:	82 30       	cpi	r24, 0x02	; 2
 2ca:	49 f0       	breq	.+18     	; 0x2de <EXT_INT_Enable+0x28>
 2cc:	15 c0       	rjmp	.+42     	; 0x2f8 <EXT_INT_Enable+0x42>
 2ce:	8b b7       	in	r24, 0x3b	; 59
 2d0:	80 64       	ori	r24, 0x40	; 64
 2d2:	8b bf       	out	0x3b, r24	; 59
 2d4:	13 c0       	rjmp	.+38     	; 0x2fc <EXT_INT_Enable+0x46>
 2d6:	8b b7       	in	r24, 0x3b	; 59
 2d8:	80 68       	ori	r24, 0x80	; 128
 2da:	8b bf       	out	0x3b, r24	; 59
 2dc:	0f c0       	rjmp	.+30     	; 0x2fc <EXT_INT_Enable+0x46>
 2de:	8b b7       	in	r24, 0x3b	; 59
 2e0:	80 62       	ori	r24, 0x20	; 32
 2e2:	8b bf       	out	0x3b, r24	; 59
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	89 83       	std	Y+1, r24	; 0x01
 2e8:	84 e0       	ldi	r24, 0x04	; 4
 2ea:	8a 83       	std	Y+2, r24	; 0x02
 2ec:	1b 82       	std	Y+3, r1	; 0x03
 2ee:	ce 01       	movw	r24, r28
 2f0:	01 96       	adiw	r24, 0x01	; 1
 2f2:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_init>
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <EXT_INT_Enable+0x46>
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	01 c0       	rjmp	.+2      	; 0x2fe <EXT_INT_Enable+0x48>
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	9f b7       	in	r25, 0x3f	; 63
 300:	90 68       	ori	r25, 0x80	; 128
 302:	9f bf       	out	0x3f, r25	; 63
 304:	0f 90       	pop	r0
 306:	0f 90       	pop	r0
 308:	0f 90       	pop	r0
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

00000310 <EXT_INT_Disable>:
 310:	81 30       	cpi	r24, 0x01	; 1
 312:	49 f0       	breq	.+18     	; 0x326 <EXT_INT_Disable+0x16>
 314:	18 f0       	brcs	.+6      	; 0x31c <EXT_INT_Disable+0xc>
 316:	82 30       	cpi	r24, 0x02	; 2
 318:	59 f0       	breq	.+22     	; 0x330 <EXT_INT_Disable+0x20>
 31a:	12 c0       	rjmp	.+36     	; 0x340 <EXT_INT_Disable+0x30>
 31c:	8b b7       	in	r24, 0x3b	; 59
 31e:	8f 7b       	andi	r24, 0xBF	; 191
 320:	8b bf       	out	0x3b, r24	; 59
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	08 95       	ret
 326:	8b b7       	in	r24, 0x3b	; 59
 328:	8f 77       	andi	r24, 0x7F	; 127
 32a:	8b bf       	out	0x3b, r24	; 59
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	08 95       	ret
 330:	8b b7       	in	r24, 0x3b	; 59
 332:	8f 7d       	andi	r24, 0xDF	; 223
 334:	8b bf       	out	0x3b, r24	; 59
 336:	8a b7       	in	r24, 0x3a	; 58
 338:	80 62       	ori	r24, 0x20	; 32
 33a:	8a bf       	out	0x3a, r24	; 58
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	08 95       	ret
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	08 95       	ret

00000344 <__vector_1>:
/*						ISRs			        */
/************************************************************************/


ISR(INT0_vect)
{
 344:	1f 92       	push	r1
 346:	0f 92       	push	r0
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	0f 92       	push	r0
 34c:	11 24       	eor	r1, r1
 34e:	2f 93       	push	r18
 350:	3f 93       	push	r19
 352:	4f 93       	push	r20
 354:	5f 93       	push	r21
 356:	6f 93       	push	r22
 358:	7f 93       	push	r23
 35a:	8f 93       	push	r24
 35c:	9f 93       	push	r25
 35e:	af 93       	push	r26
 360:	bf 93       	push	r27
 362:	ef 93       	push	r30
 364:	ff 93       	push	r31
	ExtInt_CBK_Ptr[EXT_INT0]();
 366:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <ExtInt_CBK_Ptr>
 36a:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <ExtInt_CBK_Ptr+0x1>
 36e:	09 95       	icall
}
 370:	ff 91       	pop	r31
 372:	ef 91       	pop	r30
 374:	bf 91       	pop	r27
 376:	af 91       	pop	r26
 378:	9f 91       	pop	r25
 37a:	8f 91       	pop	r24
 37c:	7f 91       	pop	r23
 37e:	6f 91       	pop	r22
 380:	5f 91       	pop	r21
 382:	4f 91       	pop	r20
 384:	3f 91       	pop	r19
 386:	2f 91       	pop	r18
 388:	0f 90       	pop	r0
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	0f 90       	pop	r0
 38e:	1f 90       	pop	r1
 390:	18 95       	reti

00000392 <__vector_2>:

ISR(INT1_vect)
{
 392:	1f 92       	push	r1
 394:	0f 92       	push	r0
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	0f 92       	push	r0
 39a:	11 24       	eor	r1, r1
 39c:	2f 93       	push	r18
 39e:	3f 93       	push	r19
 3a0:	4f 93       	push	r20
 3a2:	5f 93       	push	r21
 3a4:	6f 93       	push	r22
 3a6:	7f 93       	push	r23
 3a8:	8f 93       	push	r24
 3aa:	9f 93       	push	r25
 3ac:	af 93       	push	r26
 3ae:	bf 93       	push	r27
 3b0:	ef 93       	push	r30
 3b2:	ff 93       	push	r31
	ExtInt_CBK_Ptr[EXT_INT1]();
 3b4:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <ExtInt_CBK_Ptr+0x2>
 3b8:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <ExtInt_CBK_Ptr+0x3>
 3bc:	09 95       	icall
}
 3be:	ff 91       	pop	r31
 3c0:	ef 91       	pop	r30
 3c2:	bf 91       	pop	r27
 3c4:	af 91       	pop	r26
 3c6:	9f 91       	pop	r25
 3c8:	8f 91       	pop	r24
 3ca:	7f 91       	pop	r23
 3cc:	6f 91       	pop	r22
 3ce:	5f 91       	pop	r21
 3d0:	4f 91       	pop	r20
 3d2:	3f 91       	pop	r19
 3d4:	2f 91       	pop	r18
 3d6:	0f 90       	pop	r0
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	0f 90       	pop	r0
 3dc:	1f 90       	pop	r1
 3de:	18 95       	reti

000003e0 <Icu_Init>:
 * 				  - E_OK  : initialized successfully					  *
 *				  - E_NOK : not initialized successfully				  *
 * Description  : Initializes the ICU by initializing the timer			  *
 * 				  and enabling the global interrupt						  *
 **************************************************************************/
ERROR_STATUS Icu_Init(Icu_cfg_s * Icu_Cfg){
 3e0:	0f 93       	push	r16
 3e2:	1f 93       	push	r17
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	00 d0       	rcall	.+0      	; 0x3ea <Icu_Init+0xa>
 3ea:	00 d0       	rcall	.+0      	; 0x3ec <Icu_Init+0xc>
 3ec:	00 d0       	rcall	.+0      	; 0x3ee <Icu_Init+0xe>
 3ee:	cd b7       	in	r28, 0x3d	; 61
 3f0:	de b7       	in	r29, 0x3e	; 62
 3f2:	8c 01       	movw	r16, r24
		if (Icu_Cfg == NULL)
		{
			u8_status = E_NOK;
		}
		
        Timer_cfg_s str_Timer_cfg = {
 3f4:	ce 01       	movw	r24, r28
 3f6:	01 96       	adiw	r24, 0x01	; 1
 3f8:	26 e0       	ldi	r18, 0x06	; 6
 3fa:	fc 01       	movw	r30, r24
 3fc:	11 92       	st	Z+, r1
 3fe:	2a 95       	dec	r18
 400:	e9 f7       	brne	.-6      	; 0x3fc <Icu_Init+0x1c>
 402:	f8 01       	movw	r30, r16
 404:	21 81       	ldd	r18, Z+1	; 0x01
 406:	29 83       	std	Y+1, r18	; 0x01
 408:	21 e0       	ldi	r18, 0x01	; 1
 40a:	2b 83       	std	Y+3, r18	; 0x03
 40c:	27 e0       	ldi	r18, 0x07	; 7
 40e:	2c 83       	std	Y+4, r18	; 0x04
        	TIMER_MODE,
        	TIMER_INTERRUPT_MODE,
        	TIMER_PRESCALER_1024
        };
        
		 TICK_TIME = Prescaler / CPU_F;
 410:	20 e4       	ldi	r18, 0x40	; 64
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	30 93 6c 00 	sts	0x006C, r19	; 0x80006c <TICK_TIME+0x1>
 418:	20 93 6b 00 	sts	0x006B, r18	; 0x80006b <TICK_TIME>
		 
	 u8_status = Timer_Init(&str_Timer_cfg);
 41c:	0e 94 20 04 	call	0x840	; 0x840 <Timer_Init>
	 u8_status = Timer_Start(Icu_Cfg->ICU_Ch_Timer, 0);
 420:	60 e0       	ldi	r22, 0x00	; 0
 422:	70 e0       	ldi	r23, 0x00	; 0
 424:	f8 01       	movw	r30, r16
 426:	81 81       	ldd	r24, Z+1	; 0x01
 428:	0e 94 b3 04 	call	0x966	; 0x966 <Timer_Start>
	
/*
	external interrupts to sense the edges
*/
			
			u8_status = EXT_INT_Enable(Icu_Cfg->ICU_Ch_No);
 42c:	f8 01       	movw	r30, r16
 42e:	80 81       	ld	r24, Z
 430:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <EXT_INT_Enable>
			u8_status = EXT_INT_SetEdge(EXT_INT2_RISING_EDGE);
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	0e 94 4b 01 	call	0x296	; 0x296 <EXT_INT_SetEdge>
			
//			set_callback(extInt_CBK_Func);

	return u8_status;
}
 43a:	26 96       	adiw	r28, 0x06	; 6
 43c:	0f b6       	in	r0, 0x3f	; 63
 43e:	f8 94       	cli
 440:	de bf       	out	0x3e, r29	; 62
 442:	0f be       	out	0x3f, r0	; 63
 444:	cd bf       	out	0x3d, r28	; 61
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	1f 91       	pop	r17
 44c:	0f 91       	pop	r16
 44e:	08 95       	ret

00000450 <Icu_ReadTime>:
						  uint16_t* Icu_Time)
{
	ERROR_STATUS u8_status = E_OK;
	
	
		switch(Icu_Channel){
 450:	88 23       	and	r24, r24
 452:	29 f0       	breq	.+10     	; 0x45e <Icu_ReadTime+0xe>
 454:	83 30       	cpi	r24, 0x03	; 3
 456:	08 f4       	brcc	.+2      	; 0x45a <Icu_ReadTime+0xa>
 458:	4a c0       	rjmp	.+148    	; 0x4ee <Icu_ReadTime+0x9e>
					}
	
			break;
			
			default:
					u8_status = E_NOK;
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	08 95       	ret
			break;
			
			case ICU_TIMER_CH0:
			
			
					switch(Icu_EdgeToEdge){
 45e:	61 30       	cpi	r22, 0x01	; 1
 460:	c1 f0       	breq	.+48     	; 0x492 <Icu_ReadTime+0x42>
 462:	18 f0       	brcs	.+6      	; 0x46a <Icu_ReadTime+0x1a>
 464:	62 30       	cpi	r22, 0x02	; 2
 466:	49 f1       	breq	.+82     	; 0x4ba <Icu_ReadTime+0x6a>
 468:	44 c0       	rjmp	.+136    	; 0x4f2 <Icu_ReadTime+0xa2>
						
						case ICU_RISE_TO_RISE:
								
								*Icu_Time = gu16_RiseToRise *TICK_TIME;
 46a:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <gu16_RiseToRise>
 46e:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <gu16_RiseToRise+0x1>
 472:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <TICK_TIME>
 476:	70 91 6c 00 	lds	r23, 0x006C	; 0x80006c <TICK_TIME+0x1>
 47a:	62 9f       	mul	r22, r18
 47c:	c0 01       	movw	r24, r0
 47e:	63 9f       	mul	r22, r19
 480:	90 0d       	add	r25, r0
 482:	72 9f       	mul	r23, r18
 484:	90 0d       	add	r25, r0
 486:	11 24       	eor	r1, r1
 488:	fa 01       	movw	r30, r20
 48a:	91 83       	std	Z+1, r25	; 0x01
 48c:	80 83       	st	Z, r24

ERROR_STATUS Icu_ReadTime(uint8_t Icu_Channel,
						  uint8_t Icu_EdgeToEdge,
						  uint16_t* Icu_Time)
{
	ERROR_STATUS u8_status = E_OK;
 48e:	81 e0       	ldi	r24, 0x01	; 1
					switch(Icu_EdgeToEdge){
						
						case ICU_RISE_TO_RISE:
								
								*Icu_Time = gu16_RiseToRise *TICK_TIME;
						break;
 490:	08 95       	ret
						case ICU_RISE_TO_FALL:
						
								*Icu_Time = gu16_RiseToFall *TICK_TIME ;
 492:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <gu16_RiseToFall>
 496:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <gu16_RiseToFall+0x1>
 49a:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <TICK_TIME>
 49e:	70 91 6c 00 	lds	r23, 0x006C	; 0x80006c <TICK_TIME+0x1>
 4a2:	62 9f       	mul	r22, r18
 4a4:	c0 01       	movw	r24, r0
 4a6:	63 9f       	mul	r22, r19
 4a8:	90 0d       	add	r25, r0
 4aa:	72 9f       	mul	r23, r18
 4ac:	90 0d       	add	r25, r0
 4ae:	11 24       	eor	r1, r1
 4b0:	fa 01       	movw	r30, r20
 4b2:	91 83       	std	Z+1, r25	; 0x01
 4b4:	80 83       	st	Z, r24

ERROR_STATUS Icu_ReadTime(uint8_t Icu_Channel,
						  uint8_t Icu_EdgeToEdge,
						  uint16_t* Icu_Time)
{
	ERROR_STATUS u8_status = E_OK;
 4b6:	81 e0       	ldi	r24, 0x01	; 1
								*Icu_Time = gu16_RiseToRise *TICK_TIME;
						break;
						case ICU_RISE_TO_FALL:
						
								*Icu_Time = gu16_RiseToFall *TICK_TIME ;
						break;
 4b8:	08 95       	ret
						case ICU_FALE_TO_RISE:
						
								*Icu_Time = (gu16_RiseToRise - gu16_RiseToFall)* TICK_TIME;
 4ba:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <gu16_RiseToRise>
 4be:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <gu16_RiseToRise+0x1>
 4c2:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <gu16_RiseToFall>
 4c6:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <gu16_RiseToFall+0x1>
 4ca:	82 1b       	sub	r24, r18
 4cc:	93 0b       	sbc	r25, r19
 4ce:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <TICK_TIME>
 4d2:	70 91 6c 00 	lds	r23, 0x006C	; 0x80006c <TICK_TIME+0x1>
 4d6:	86 9f       	mul	r24, r22
 4d8:	90 01       	movw	r18, r0
 4da:	87 9f       	mul	r24, r23
 4dc:	30 0d       	add	r19, r0
 4de:	96 9f       	mul	r25, r22
 4e0:	30 0d       	add	r19, r0
 4e2:	11 24       	eor	r1, r1
 4e4:	fa 01       	movw	r30, r20
 4e6:	31 83       	std	Z+1, r19	; 0x01
 4e8:	20 83       	st	Z, r18

ERROR_STATUS Icu_ReadTime(uint8_t Icu_Channel,
						  uint8_t Icu_EdgeToEdge,
						  uint16_t* Icu_Time)
{
	ERROR_STATUS u8_status = E_OK;
 4ea:	81 e0       	ldi	r24, 0x01	; 1
								*Icu_Time = gu16_RiseToFall *TICK_TIME ;
						break;
						case ICU_FALE_TO_RISE:
						
								*Icu_Time = (gu16_RiseToRise - gu16_RiseToFall)* TICK_TIME;
						break;
 4ec:	08 95       	ret

ERROR_STATUS Icu_ReadTime(uint8_t Icu_Channel,
						  uint8_t Icu_EdgeToEdge,
						  uint16_t* Icu_Time)
{
	ERROR_STATUS u8_status = E_OK;
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	08 95       	ret
						
								*Icu_Time = (gu16_RiseToRise - gu16_RiseToFall)* TICK_TIME;
						break;
						
						default: 
								u8_status = E_NOK;
 4f2:	80 e0       	ldi	r24, 0x00	; 0
			
			default:
					u8_status = E_NOK;
			}
		return u8_status;
}
 4f4:	08 95       	ret

000004f6 <__vector_3>:


/* External Interrupt 2 vector */

ISR(INT2_vect)
{
 4f6:	1f 92       	push	r1
 4f8:	0f 92       	push	r0
 4fa:	0f b6       	in	r0, 0x3f	; 63
 4fc:	0f 92       	push	r0
 4fe:	11 24       	eor	r1, r1
 500:	2f 93       	push	r18
 502:	3f 93       	push	r19
 504:	4f 93       	push	r20
 506:	5f 93       	push	r21
 508:	6f 93       	push	r22
 50a:	7f 93       	push	r23
 50c:	8f 93       	push	r24
 50e:	9f 93       	push	r25
 510:	af 93       	push	r26
 512:	bf 93       	push	r27
 514:	ef 93       	push	r30
 516:	ff 93       	push	r31
	static volatile uint8_t edgeDetect = EXT_INT2_RISING_EDGE;
	
		switch(edgeDetect){
 518:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 51c:	88 23       	and	r24, r24
 51e:	c1 f0       	breq	.+48     	; 0x550 <__vector_3+0x5a>
 520:	81 30       	cpi	r24, 0x01	; 1
 522:	39 f5       	brne	.+78     	; 0x572 <__vector_3+0x7c>
			
	            case EXT_INT2_RISING_EDGE :
	            
	            		
	            		Timer_Start(ICU_TIMER_CH0, 0);
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	70 e0       	ldi	r23, 0x00	; 0
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	0e 94 b3 04 	call	0x966	; 0x966 <Timer_Start>
	            	
						Timer_GetValue(ICU_TIMER_CH0, &gu16_RiseToRise);	
 52e:	6f e6       	ldi	r22, 0x6F	; 111
 530:	70 e0       	ldi	r23, 0x00	; 0
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	0e 94 6e 05 	call	0xadc	; 0xadc <Timer_GetValue>

	            		EXT_INT_Disable(ICU_CH2);
 538:	82 e0       	ldi	r24, 0x02	; 2
 53a:	0e 94 88 01 	call	0x310	; 0x310 <EXT_INT_Disable>
	            		EXT_INT_SetEdge(EXT_INT2_FALLING_EDGE);
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	0e 94 4b 01 	call	0x296	; 0x296 <EXT_INT_SetEdge>
	            		EXT_INT_Enable(ICU_CH2);
 544:	82 e0       	ldi	r24, 0x02	; 2
 546:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <EXT_INT_Enable>


	            		//MCUCSR = ~ 0x40;
	            		edgeDetect = EXT_INT2_FALLING_EDGE;
 54a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
	            
	            	  break;
 54e:	11 c0       	rjmp	.+34     	; 0x572 <__vector_3+0x7c>
					  
	            case  EXT_INT2_FALLING_EDGE:
	            
	            	Timer_GetValue(ICU_TIMER_CH0, &gu16_RiseToFall);
 550:	6d e6       	ldi	r22, 0x6D	; 109
 552:	70 e0       	ldi	r23, 0x00	; 0
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	0e 94 6e 05 	call	0xadc	; 0xadc <Timer_GetValue>
	            
	            	EXT_INT_Disable(ICU_CH2);
 55a:	82 e0       	ldi	r24, 0x02	; 2
 55c:	0e 94 88 01 	call	0x310	; 0x310 <EXT_INT_Disable>
	            	EXT_INT_SetEdge(EXT_INT2_RISING_EDGE);
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	0e 94 4b 01 	call	0x296	; 0x296 <EXT_INT_SetEdge>
	            	EXT_INT_Enable(ICU_CH2);
 566:	82 e0       	ldi	r24, 0x02	; 2
 568:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <EXT_INT_Enable>
	            	
	            	//MCUCSR |= 0x40;
	            	edgeDetect = EXT_INT2_RISING_EDGE;
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
				break;
	            	
					default: break;
		}
		
}
 572:	ff 91       	pop	r31
 574:	ef 91       	pop	r30
 576:	bf 91       	pop	r27
 578:	af 91       	pop	r26
 57a:	9f 91       	pop	r25
 57c:	8f 91       	pop	r24
 57e:	7f 91       	pop	r23
 580:	6f 91       	pop	r22
 582:	5f 91       	pop	r21
 584:	4f 91       	pop	r20
 586:	3f 91       	pop	r19
 588:	2f 91       	pop	r18
 58a:	0f 90       	pop	r0
 58c:	0f be       	out	0x3f, r0	; 63
 58e:	0f 90       	pop	r0
 590:	1f 90       	pop	r1
 592:	18 95       	reti

00000594 <__vector_11>:

/*timer overflow vector */

ISR(TIMER0_OVF_vect){
 594:	1f 92       	push	r1
 596:	0f 92       	push	r0
 598:	0f b6       	in	r0, 0x3f	; 63
 59a:	0f 92       	push	r0
 59c:	11 24       	eor	r1, r1
 59e:	8f 93       	push	r24
	
gu8_OVFs++;
 5a0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <gu8_OVFs>
 5a4:	8f 5f       	subi	r24, 0xFF	; 255
 5a6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <gu8_OVFs>
//Timer_Stop(0);

}
 5aa:	8f 91       	pop	r24
 5ac:	0f 90       	pop	r0
 5ae:	0f be       	out	0x3f, r0	; 63
 5b0:	0f 90       	pop	r0
 5b2:	1f 90       	pop	r1
 5b4:	18 95       	reti

000005b6 <main>:


int main(void)
{
	 
	 Car_SM_Init();
 5b6:	0e 94 51 00 	call	0xa2	; 0xa2 <Car_SM_Init>
	 
	 while(1){
		 
		 Car_SM_Update();
 5ba:	0e 94 56 00 	call	0xac	; 0xac <Car_SM_Update>
 5be:	fd cf       	rjmp	.-6      	; 0x5ba <main+0x4>

000005c0 <Motor_Init>:
		
		default:
			u8_status = E_NOK;
	}
	return u8_status;
}
 5c0:	0f 93       	push	r16
 5c2:	1f 93       	push	r17
 5c4:	cf 93       	push	r28
 5c6:	df 93       	push	r29
 5c8:	cd b7       	in	r28, 0x3d	; 61
 5ca:	de b7       	in	r29, 0x3e	; 62
 5cc:	29 97       	sbiw	r28, 0x09	; 9
 5ce:	0f b6       	in	r0, 0x3f	; 63
 5d0:	f8 94       	cli
 5d2:	de bf       	out	0x3e, r29	; 62
 5d4:	0f be       	out	0x3f, r0	; 63
 5d6:	cd bf       	out	0x3d, r28	; 61
 5d8:	81 30       	cpi	r24, 0x01	; 1
 5da:	19 f0       	breq	.+6      	; 0x5e2 <Motor_Init+0x22>
 5dc:	82 30       	cpi	r24, 0x02	; 2
 5de:	f9 f0       	breq	.+62     	; 0x61e <Motor_Init+0x5e>
 5e0:	3c c0       	rjmp	.+120    	; 0x65a <Motor_Init+0x9a>
 5e2:	03 e0       	ldi	r16, 0x03	; 3
 5e4:	09 83       	std	Y+1, r16	; 0x01
 5e6:	80 e1       	ldi	r24, 0x10	; 16
 5e8:	8a 83       	std	Y+2, r24	; 0x02
 5ea:	1f ef       	ldi	r17, 0xFF	; 255
 5ec:	1b 83       	std	Y+3, r17	; 0x03
 5ee:	ce 01       	movw	r24, r28
 5f0:	01 96       	adiw	r24, 0x01	; 1
 5f2:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_init>
 5f6:	0c 83       	std	Y+4, r16	; 0x04
 5f8:	84 e0       	ldi	r24, 0x04	; 4
 5fa:	8d 83       	std	Y+5, r24	; 0x05
 5fc:	1e 83       	std	Y+6, r17	; 0x06
 5fe:	ce 01       	movw	r24, r28
 600:	04 96       	adiw	r24, 0x04	; 4
 602:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_init>
 606:	0f 83       	std	Y+7, r16	; 0x07
 608:	88 e0       	ldi	r24, 0x08	; 8
 60a:	88 87       	std	Y+8, r24	; 0x08
 60c:	19 87       	std	Y+9, r17	; 0x09
 60e:	ce 01       	movw	r24, r28
 610:	07 96       	adiw	r24, 0x07	; 7
 612:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_init>
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <gu8_initState+0x1>
 61c:	1f c0       	rjmp	.+62     	; 0x65c <Motor_Init+0x9c>
 61e:	03 e0       	ldi	r16, 0x03	; 3
 620:	09 83       	std	Y+1, r16	; 0x01
 622:	80 e2       	ldi	r24, 0x20	; 32
 624:	8a 83       	std	Y+2, r24	; 0x02
 626:	1f ef       	ldi	r17, 0xFF	; 255
 628:	1b 83       	std	Y+3, r17	; 0x03
 62a:	ce 01       	movw	r24, r28
 62c:	01 96       	adiw	r24, 0x01	; 1
 62e:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_init>
 632:	0c 83       	std	Y+4, r16	; 0x04
 634:	80 e4       	ldi	r24, 0x40	; 64
 636:	8d 83       	std	Y+5, r24	; 0x05
 638:	1e 83       	std	Y+6, r17	; 0x06
 63a:	ce 01       	movw	r24, r28
 63c:	04 96       	adiw	r24, 0x04	; 4
 63e:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_init>
 642:	0f 83       	std	Y+7, r16	; 0x07
 644:	80 e8       	ldi	r24, 0x80	; 128
 646:	88 87       	std	Y+8, r24	; 0x08
 648:	19 87       	std	Y+9, r17	; 0x09
 64a:	ce 01       	movw	r24, r28
 64c:	07 96       	adiw	r24, 0x07	; 7
 64e:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_init>
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <gu8_Timer2initFlag>
 658:	01 c0       	rjmp	.+2      	; 0x65c <Motor_Init+0x9c>
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	29 96       	adiw	r28, 0x09	; 9
 65e:	0f b6       	in	r0, 0x3f	; 63
 660:	f8 94       	cli
 662:	de bf       	out	0x3e, r29	; 62
 664:	0f be       	out	0x3f, r0	; 63
 666:	cd bf       	out	0x3d, r28	; 61
 668:	df 91       	pop	r29
 66a:	cf 91       	pop	r28
 66c:	1f 91       	pop	r17
 66e:	0f 91       	pop	r16
 670:	08 95       	ret

00000672 <Motor_Direction>:
 672:	81 30       	cpi	r24, 0x01	; 1
 674:	19 f0       	breq	.+6      	; 0x67c <Motor_Direction+0xa>
 676:	82 30       	cpi	r24, 0x02	; 2
 678:	59 f1       	breq	.+86     	; 0x6d0 <Motor_Direction+0x5e>
 67a:	54 c0       	rjmp	.+168    	; 0x724 <Motor_Direction+0xb2>
 67c:	61 30       	cpi	r22, 0x01	; 1
 67e:	21 f0       	breq	.+8      	; 0x688 <Motor_Direction+0x16>
 680:	d8 f0       	brcs	.+54     	; 0x6b8 <Motor_Direction+0x46>
 682:	62 30       	cpi	r22, 0x02	; 2
 684:	69 f0       	breq	.+26     	; 0x6a0 <Motor_Direction+0x2e>
 686:	50 c0       	rjmp	.+160    	; 0x728 <Motor_Direction+0xb6>
 688:	4f ef       	ldi	r20, 0xFF	; 255
 68a:	64 e0       	ldi	r22, 0x04	; 4
 68c:	83 e0       	ldi	r24, 0x03	; 3
 68e:	0e 94 04 01 	call	0x208	; 0x208 <DIO_Write>
 692:	40 e0       	ldi	r20, 0x00	; 0
 694:	68 e0       	ldi	r22, 0x08	; 8
 696:	83 e0       	ldi	r24, 0x03	; 3
 698:	0e 94 04 01 	call	0x208	; 0x208 <DIO_Write>
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	08 95       	ret
 6a0:	40 e0       	ldi	r20, 0x00	; 0
 6a2:	64 e0       	ldi	r22, 0x04	; 4
 6a4:	83 e0       	ldi	r24, 0x03	; 3
 6a6:	0e 94 04 01 	call	0x208	; 0x208 <DIO_Write>
 6aa:	4f ef       	ldi	r20, 0xFF	; 255
 6ac:	68 e0       	ldi	r22, 0x08	; 8
 6ae:	83 e0       	ldi	r24, 0x03	; 3
 6b0:	0e 94 04 01 	call	0x208	; 0x208 <DIO_Write>
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	08 95       	ret
 6b8:	40 e0       	ldi	r20, 0x00	; 0
 6ba:	64 e0       	ldi	r22, 0x04	; 4
 6bc:	83 e0       	ldi	r24, 0x03	; 3
 6be:	0e 94 04 01 	call	0x208	; 0x208 <DIO_Write>
 6c2:	40 e0       	ldi	r20, 0x00	; 0
 6c4:	68 e0       	ldi	r22, 0x08	; 8
 6c6:	83 e0       	ldi	r24, 0x03	; 3
 6c8:	0e 94 04 01 	call	0x208	; 0x208 <DIO_Write>
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	08 95       	ret
 6d0:	61 30       	cpi	r22, 0x01	; 1
 6d2:	21 f0       	breq	.+8      	; 0x6dc <Motor_Direction+0x6a>
 6d4:	d8 f0       	brcs	.+54     	; 0x70c <Motor_Direction+0x9a>
 6d6:	62 30       	cpi	r22, 0x02	; 2
 6d8:	69 f0       	breq	.+26     	; 0x6f4 <Motor_Direction+0x82>
 6da:	28 c0       	rjmp	.+80     	; 0x72c <Motor_Direction+0xba>
 6dc:	4f ef       	ldi	r20, 0xFF	; 255
 6de:	60 e4       	ldi	r22, 0x40	; 64
 6e0:	83 e0       	ldi	r24, 0x03	; 3
 6e2:	0e 94 04 01 	call	0x208	; 0x208 <DIO_Write>
 6e6:	40 e0       	ldi	r20, 0x00	; 0
 6e8:	60 e8       	ldi	r22, 0x80	; 128
 6ea:	83 e0       	ldi	r24, 0x03	; 3
 6ec:	0e 94 04 01 	call	0x208	; 0x208 <DIO_Write>
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	08 95       	ret
 6f4:	40 e0       	ldi	r20, 0x00	; 0
 6f6:	60 e4       	ldi	r22, 0x40	; 64
 6f8:	83 e0       	ldi	r24, 0x03	; 3
 6fa:	0e 94 04 01 	call	0x208	; 0x208 <DIO_Write>
 6fe:	4f ef       	ldi	r20, 0xFF	; 255
 700:	60 e8       	ldi	r22, 0x80	; 128
 702:	83 e0       	ldi	r24, 0x03	; 3
 704:	0e 94 04 01 	call	0x208	; 0x208 <DIO_Write>
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	08 95       	ret
 70c:	40 e0       	ldi	r20, 0x00	; 0
 70e:	60 e4       	ldi	r22, 0x40	; 64
 710:	83 e0       	ldi	r24, 0x03	; 3
 712:	0e 94 04 01 	call	0x208	; 0x208 <DIO_Write>
 716:	40 e0       	ldi	r20, 0x00	; 0
 718:	60 e8       	ldi	r22, 0x80	; 128
 71a:	83 e0       	ldi	r24, 0x03	; 3
 71c:	0e 94 04 01 	call	0x208	; 0x208 <DIO_Write>
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	08 95       	ret
 724:	80 e0       	ldi	r24, 0x00	; 0
 726:	08 95       	ret
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	08 95       	ret
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	08 95       	ret

00000730 <Motor_Stop>:

ERROR_STATUS Motor_Stop(uint8_t Motor_Number)
{
	ERROR_STATUS u8_status = E_OK;
	
	switch(Motor_Number)
 730:	81 30       	cpi	r24, 0x01	; 1
 732:	19 f0       	breq	.+6      	; 0x73a <Motor_Stop+0xa>
 734:	82 30       	cpi	r24, 0x02	; 2
 736:	31 f0       	breq	.+12     	; 0x744 <Motor_Stop+0x14>
 738:	0a c0       	rjmp	.+20     	; 0x74e <Motor_Stop+0x1e>
	{
		case MOTOR_1:
		          Pwm_Stop(PWM_CH1A);
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	0e 94 a9 03 	call	0x752	; 0x752 <Pwm_Stop>
*/


ERROR_STATUS Motor_Stop(uint8_t Motor_Number)
{
	ERROR_STATUS u8_status = E_OK;
 740:	81 e0       	ldi	r24, 0x01	; 1
	
	switch(Motor_Number)
	{
		case MOTOR_1:
		          Pwm_Stop(PWM_CH1A);
					break;
 742:	08 95       	ret

		case MOTOR_2:
					Pwm_Stop(PWM_CH1B);
 744:	82 e0       	ldi	r24, 0x02	; 2
 746:	0e 94 a9 03 	call	0x752	; 0x752 <Pwm_Stop>
*/


ERROR_STATUS Motor_Stop(uint8_t Motor_Number)
{
	ERROR_STATUS u8_status = E_OK;
 74a:	81 e0       	ldi	r24, 0x01	; 1
		          Pwm_Stop(PWM_CH1A);
					break;

		case MOTOR_2:
					Pwm_Stop(PWM_CH1B);
					break;
 74c:	08 95       	ret
					
		default:
				u8_status=E_NOK;
 74e:	80 e0       	ldi	r24, 0x00	; 0
	}
	return u8_status;
}
 750:	08 95       	ret

00000752 <Pwm_Stop>:
 
ERROR_STATUS Pwm_Stop(uint8_t Channel)
	 {
		 ERROR_STATUS u8_status = E_OK;
		 
		 switch(Channel)
 752:	81 30       	cpi	r24, 0x01	; 1
 754:	19 f0       	breq	.+6      	; 0x75c <Pwm_Stop+0xa>
 756:	82 30       	cpi	r24, 0x02	; 2
 758:	29 f0       	breq	.+10     	; 0x764 <Pwm_Stop+0x12>
 75a:	08 c0       	rjmp	.+16     	; 0x76c <Pwm_Stop+0x1a>
		 {
			 case PWM_CH1A:
			 OCR1A = 0;
 75c:	1b bc       	out	0x2b, r1	; 43
 75e:	1a bc       	out	0x2a, r1	; 42
/*				of the corresponding channel                                     */
/*********************************************************************************/
 
ERROR_STATUS Pwm_Stop(uint8_t Channel)
	 {
		 ERROR_STATUS u8_status = E_OK;
 760:	81 e0       	ldi	r24, 0x01	; 1
		 
		 switch(Channel)
		 {
			 case PWM_CH1A:
			 OCR1A = 0;
			 break;
 762:	08 95       	ret
			 
			 case PWM_CH1B:
			 OCR1B = 0;
 764:	19 bc       	out	0x29, r1	; 41
 766:	18 bc       	out	0x28, r1	; 40
/*				of the corresponding channel                                     */
/*********************************************************************************/
 
ERROR_STATUS Pwm_Stop(uint8_t Channel)
	 {
		 ERROR_STATUS u8_status = E_OK;
 768:	81 e0       	ldi	r24, 0x01	; 1
			 OCR1A = 0;
			 break;
			 
			 case PWM_CH1B:
			 OCR1B = 0;
			 break;
 76a:	08 95       	ret
			 
			 default:
					u8_status = E_NOK;
 76c:	80 e0       	ldi	r24, 0x00	; 0
		 }
		 return u8_status;
 76e:	08 95       	ret

00000770 <softwareDelayMs>:
 * Description: this delay function operate in a polling manner
 * 				don't use it with RTOSs
 * @param a_delay_in_ms: the milli-seconds
 */

void softwareDelayMs(uint32_t u32_delay_in_ms){
 770:	0f 93       	push	r16
 772:	1f 93       	push	r17
 774:	8b 01       	movw	r16, r22
 776:	9c 01       	movw	r18, r24
			4	INTRUCTIONS inside the loop  TAKE .500us
	uint8_t NumOfCounts = u32_delay_in_ms / ( 4 * 1 / 8000000);
			*/
		uint32_t numbersOfmsCounter; 
		uint32_t counter1;
	for(numbersOfmsCounter = 0; numbersOfmsCounter < u32_delay_in_ms ; numbersOfmsCounter++)
 778:	67 2b       	or	r22, r23
 77a:	68 2b       	or	r22, r24
 77c:	69 2b       	or	r22, r25
 77e:	89 f4       	brne	.+34     	; 0x7a2 <softwareDelayMs+0x32>
 780:	16 c0       	rjmp	.+44     	; 0x7ae <softwareDelayMs+0x3e>
	{
	 for(counter1 = 0 ; counter1 < 1000 ; counter1++)
	  {
		  asm("NOP"); // takes one clock cycle	 
 782:	00 00       	nop
 784:	01 96       	adiw	r24, 0x01	; 1
			*/
		uint32_t numbersOfmsCounter; 
		uint32_t counter1;
	for(numbersOfmsCounter = 0; numbersOfmsCounter < u32_delay_in_ms ; numbersOfmsCounter++)
	{
	 for(counter1 = 0 ; counter1 < 1000 ; counter1++)
 786:	88 3e       	cpi	r24, 0xE8	; 232
 788:	e3 e0       	ldi	r30, 0x03	; 3
 78a:	9e 07       	cpc	r25, r30
 78c:	d1 f7       	brne	.-12     	; 0x782 <softwareDelayMs+0x12>
			4	INTRUCTIONS inside the loop  TAKE .500us
	uint8_t NumOfCounts = u32_delay_in_ms / ( 4 * 1 / 8000000);
			*/
		uint32_t numbersOfmsCounter; 
		uint32_t counter1;
	for(numbersOfmsCounter = 0; numbersOfmsCounter < u32_delay_in_ms ; numbersOfmsCounter++)
 78e:	4f 5f       	subi	r20, 0xFF	; 255
 790:	5f 4f       	sbci	r21, 0xFF	; 255
 792:	6f 4f       	sbci	r22, 0xFF	; 255
 794:	7f 4f       	sbci	r23, 0xFF	; 255
 796:	04 17       	cp	r16, r20
 798:	15 07       	cpc	r17, r21
 79a:	26 07       	cpc	r18, r22
 79c:	37 07       	cpc	r19, r23
 79e:	21 f4       	brne	.+8      	; 0x7a8 <softwareDelayMs+0x38>
 7a0:	06 c0       	rjmp	.+12     	; 0x7ae <softwareDelayMs+0x3e>
 7a2:	40 e0       	ldi	r20, 0x00	; 0
 7a4:	50 e0       	ldi	r21, 0x00	; 0
 7a6:	ba 01       	movw	r22, r20
 * Description: this delay function operate in a polling manner
 * 				don't use it with RTOSs
 * @param a_delay_in_ms: the milli-seconds
 */

void softwareDelayMs(uint32_t u32_delay_in_ms){
 7a8:	80 e0       	ldi	r24, 0x00	; 0
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	ea cf       	rjmp	.-44     	; 0x782 <softwareDelayMs+0x12>
	  {
		  asm("NOP"); // takes one clock cycle	 
	  }
    }
	
 7ae:	1f 91       	pop	r17
 7b0:	0f 91       	pop	r16
 7b2:	08 95       	ret

000007b4 <Steering_Init>:

ERROR_STATUS Steering_Init(void){
	
	ERROR_STATUS u8_status = E_OK;
	
	u8_status = Motor_Init(MOTOR_1);
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <Motor_Init>
	u8_status = Motor_Init(MOTOR_2);
 7ba:	82 e0       	ldi	r24, 0x02	; 2
 7bc:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <Motor_Init>
	
	return u8_status;
}
 7c0:	08 95       	ret

000007c2 <Steering_SteerCar>:
ERROR_STATUS Steering_SteerCar(uint8_t Steering_direction,
							   uint8_t speed){
					
			ERROR_STATUS	u8_status = E_OK;		   
								
				  switch (Steering_direction) {
 7c2:	82 30       	cpi	r24, 0x02	; 2
 7c4:	e9 f0       	breq	.+58     	; 0x800 <Steering_SteerCar+0x3e>
 7c6:	28 f4       	brcc	.+10     	; 0x7d2 <Steering_SteerCar+0x10>
 7c8:	88 23       	and	r24, r24
 7ca:	41 f0       	breq	.+16     	; 0x7dc <Steering_SteerCar+0x1a>
 7cc:	81 30       	cpi	r24, 0x01	; 1
 7ce:	71 f0       	breq	.+28     	; 0x7ec <Steering_SteerCar+0x2a>
 7d0:	35 c0       	rjmp	.+106    	; 0x83c <Steering_SteerCar+0x7a>
 7d2:	83 30       	cpi	r24, 0x03	; 3
 7d4:	f9 f0       	breq	.+62     	; 0x814 <Steering_SteerCar+0x52>
 7d6:	84 30       	cpi	r24, 0x04	; 4
 7d8:	39 f1       	breq	.+78     	; 0x828 <Steering_SteerCar+0x66>
 7da:	30 c0       	rjmp	.+96     	; 0x83c <Steering_SteerCar+0x7a>
									    
					case CAR_STOP:
							Motor_Stop(MOTOR_1);
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	0e 94 98 03 	call	0x730	; 0x730 <Motor_Stop>
							Motor_Stop(MOTOR_2);
 7e2:	82 e0       	ldi	r24, 0x02	; 2
 7e4:	0e 94 98 03 	call	0x730	; 0x730 <Motor_Stop>
 * 							
 */
ERROR_STATUS Steering_SteerCar(uint8_t Steering_direction,
							   uint8_t speed){
					
			ERROR_STATUS	u8_status = E_OK;		   
 7e8:	81 e0       	ldi	r24, 0x01	; 1
									    
					case CAR_STOP:
							Motor_Stop(MOTOR_1);
							Motor_Stop(MOTOR_2);
							
							break;
 7ea:	08 95       	ret
							
					case CAR_FORWARD:
							Motor_Direction(MOTOR_1,MOTOR_FORWARD);
 7ec:	61 e0       	ldi	r22, 0x01	; 1
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	0e 94 39 03 	call	0x672	; 0x672 <Motor_Direction>
							Motor_Direction(MOTOR_2,MOTOR_FORWARD);
 7f4:	61 e0       	ldi	r22, 0x01	; 1
 7f6:	82 e0       	ldi	r24, 0x02	; 2
 7f8:	0e 94 39 03 	call	0x672	; 0x672 <Motor_Direction>
 * 							
 */
ERROR_STATUS Steering_SteerCar(uint8_t Steering_direction,
							   uint8_t speed){
					
			ERROR_STATUS	u8_status = E_OK;		   
 7fc:	81 e0       	ldi	r24, 0x01	; 1
							
					case CAR_FORWARD:
							Motor_Direction(MOTOR_1,MOTOR_FORWARD);
							Motor_Direction(MOTOR_2,MOTOR_FORWARD);
							
							break;
 7fe:	08 95       	ret
							
					case CAR_BACKWARD:
							Motor_Direction(MOTOR_1,MOTOR_BACKWARD);
 800:	62 e0       	ldi	r22, 0x02	; 2
 802:	81 e0       	ldi	r24, 0x01	; 1
 804:	0e 94 39 03 	call	0x672	; 0x672 <Motor_Direction>
							Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
 808:	62 e0       	ldi	r22, 0x02	; 2
 80a:	82 e0       	ldi	r24, 0x02	; 2
 80c:	0e 94 39 03 	call	0x672	; 0x672 <Motor_Direction>
 * 							
 */
ERROR_STATUS Steering_SteerCar(uint8_t Steering_direction,
							   uint8_t speed){
					
			ERROR_STATUS	u8_status = E_OK;		   
 810:	81 e0       	ldi	r24, 0x01	; 1
							
					case CAR_BACKWARD:
							Motor_Direction(MOTOR_1,MOTOR_BACKWARD);
							Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
							
							break;
 812:	08 95       	ret
					
				    case CAR_RIGHT:
							Motor_Direction(MOTOR_1,MOTOR_BACKWARD);
 814:	62 e0       	ldi	r22, 0x02	; 2
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	0e 94 39 03 	call	0x672	; 0x672 <Motor_Direction>
							Motor_Direction(MOTOR_2,MOTOR_FORWARD);
 81c:	61 e0       	ldi	r22, 0x01	; 1
 81e:	82 e0       	ldi	r24, 0x02	; 2
 820:	0e 94 39 03 	call	0x672	; 0x672 <Motor_Direction>
 * 							
 */
ERROR_STATUS Steering_SteerCar(uint8_t Steering_direction,
							   uint8_t speed){
					
			ERROR_STATUS	u8_status = E_OK;		   
 824:	81 e0       	ldi	r24, 0x01	; 1
					
				    case CAR_RIGHT:
							Motor_Direction(MOTOR_1,MOTOR_BACKWARD);
							Motor_Direction(MOTOR_2,MOTOR_FORWARD);
							
	     					break;
 826:	08 95       	ret

					case CAR_LEFT:
							Motor_Direction(MOTOR_1,MOTOR_FORWARD);
 828:	61 e0       	ldi	r22, 0x01	; 1
 82a:	81 e0       	ldi	r24, 0x01	; 1
 82c:	0e 94 39 03 	call	0x672	; 0x672 <Motor_Direction>
							Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
 830:	62 e0       	ldi	r22, 0x02	; 2
 832:	82 e0       	ldi	r24, 0x02	; 2
 834:	0e 94 39 03 	call	0x672	; 0x672 <Motor_Direction>
 * 							
 */
ERROR_STATUS Steering_SteerCar(uint8_t Steering_direction,
							   uint8_t speed){
					
			ERROR_STATUS	u8_status = E_OK;		   
 838:	81 e0       	ldi	r24, 0x01	; 1

					case CAR_LEFT:
							Motor_Direction(MOTOR_1,MOTOR_FORWARD);
							Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
								
							break;
 83a:	08 95       	ret
							
					default:
							u8_status = E_NOK;
 83c:	80 e0       	ldi	r24, 0x00	; 0
				  }
	  return u8_status;
	}
 83e:	08 95       	ret

00000840 <Timer_Init>:
		default:
				u8_status = E_NOK;
		}
	} /*end of else */
	return u8_status;
}
 840:	fc 01       	movw	r30, r24
 842:	89 2b       	or	r24, r25
 844:	09 f4       	brne	.+2      	; 0x848 <Timer_Init+0x8>
 846:	89 c0       	rjmp	.+274    	; 0x95a <__stack+0xfb>
 848:	80 81       	ld	r24, Z
 84a:	84 30       	cpi	r24, 0x04	; 4
 84c:	08 f0       	brcs	.+2      	; 0x850 <Timer_Init+0x10>
 84e:	87 c0       	rjmp	.+270    	; 0x95e <__stack+0xff>
 850:	81 30       	cpi	r24, 0x01	; 1
 852:	79 f1       	breq	.+94     	; 0x8b2 <__stack+0x53>
 854:	20 f0       	brcs	.+8      	; 0x85e <Timer_Init+0x1e>
 856:	82 30       	cpi	r24, 0x02	; 2
 858:	09 f4       	brne	.+2      	; 0x85c <Timer_Init+0x1c>
 85a:	55 c0       	rjmp	.+170    	; 0x906 <__stack+0xa7>
 85c:	82 c0       	rjmp	.+260    	; 0x962 <__stack+0x103>
 85e:	81 81       	ldd	r24, Z+1	; 0x01
 860:	81 30       	cpi	r24, 0x01	; 1
 862:	21 f0       	breq	.+8      	; 0x86c <__stack+0xd>
 864:	68 f0       	brcs	.+26     	; 0x880 <__stack+0x21>
 866:	82 30       	cpi	r24, 0x02	; 2
 868:	31 f0       	breq	.+12     	; 0x876 <__stack+0x17>
 86a:	0f c0       	rjmp	.+30     	; 0x88a <__stack+0x2b>
 86c:	87 e0       	ldi	r24, 0x07	; 7
 86e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <gu8_Prescaler>
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	0b c0       	rjmp	.+22     	; 0x88c <__stack+0x2d>
 876:	86 e0       	ldi	r24, 0x06	; 6
 878:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <gu8_Prescaler>
 87c:	81 e0       	ldi	r24, 0x01	; 1
 87e:	06 c0       	rjmp	.+12     	; 0x88c <__stack+0x2d>
 880:	83 81       	ldd	r24, Z+3	; 0x03
 882:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <gu8_Prescaler>
 886:	81 e0       	ldi	r24, 0x01	; 1
 888:	01 c0       	rjmp	.+2      	; 0x88c <__stack+0x2d>
 88a:	80 e0       	ldi	r24, 0x00	; 0
 88c:	92 81       	ldd	r25, Z+2	; 0x02
 88e:	99 23       	and	r25, r25
 890:	19 f0       	breq	.+6      	; 0x898 <__stack+0x39>
 892:	91 30       	cpi	r25, 0x01	; 1
 894:	29 f0       	breq	.+10     	; 0x8a0 <__stack+0x41>
 896:	08 c0       	rjmp	.+16     	; 0x8a8 <__stack+0x49>
 898:	99 b7       	in	r25, 0x39	; 57
 89a:	9e 7f       	andi	r25, 0xFE	; 254
 89c:	99 bf       	out	0x39, r25	; 57
 89e:	05 c0       	rjmp	.+10     	; 0x8aa <__stack+0x4b>
 8a0:	99 b7       	in	r25, 0x39	; 57
 8a2:	91 60       	ori	r25, 0x01	; 1
 8a4:	99 bf       	out	0x39, r25	; 57
 8a6:	01 c0       	rjmp	.+2      	; 0x8aa <__stack+0x4b>
 8a8:	80 e0       	ldi	r24, 0x00	; 0
 8aa:	91 e0       	ldi	r25, 0x01	; 1
 8ac:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <gu8_Timer0initFlag>
 8b0:	08 95       	ret
 8b2:	81 81       	ldd	r24, Z+1	; 0x01
 8b4:	81 30       	cpi	r24, 0x01	; 1
 8b6:	21 f0       	breq	.+8      	; 0x8c0 <__stack+0x61>
 8b8:	68 f0       	brcs	.+26     	; 0x8d4 <__stack+0x75>
 8ba:	82 30       	cpi	r24, 0x02	; 2
 8bc:	31 f0       	breq	.+12     	; 0x8ca <__stack+0x6b>
 8be:	0f c0       	rjmp	.+30     	; 0x8de <__stack+0x7f>
 8c0:	87 e0       	ldi	r24, 0x07	; 7
 8c2:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <gu8_Prescaler>
 8c6:	81 e0       	ldi	r24, 0x01	; 1
 8c8:	0b c0       	rjmp	.+22     	; 0x8e0 <__stack+0x81>
 8ca:	86 e0       	ldi	r24, 0x06	; 6
 8cc:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <gu8_Prescaler>
 8d0:	81 e0       	ldi	r24, 0x01	; 1
 8d2:	06 c0       	rjmp	.+12     	; 0x8e0 <__stack+0x81>
 8d4:	83 81       	ldd	r24, Z+3	; 0x03
 8d6:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <gu8_Prescaler>
 8da:	81 e0       	ldi	r24, 0x01	; 1
 8dc:	01 c0       	rjmp	.+2      	; 0x8e0 <__stack+0x81>
 8de:	80 e0       	ldi	r24, 0x00	; 0
 8e0:	92 81       	ldd	r25, Z+2	; 0x02
 8e2:	99 23       	and	r25, r25
 8e4:	19 f0       	breq	.+6      	; 0x8ec <__stack+0x8d>
 8e6:	91 30       	cpi	r25, 0x01	; 1
 8e8:	29 f0       	breq	.+10     	; 0x8f4 <__stack+0x95>
 8ea:	08 c0       	rjmp	.+16     	; 0x8fc <__stack+0x9d>
 8ec:	99 b7       	in	r25, 0x39	; 57
 8ee:	9b 7f       	andi	r25, 0xFB	; 251
 8f0:	99 bf       	out	0x39, r25	; 57
 8f2:	05 c0       	rjmp	.+10     	; 0x8fe <__stack+0x9f>
 8f4:	99 b7       	in	r25, 0x39	; 57
 8f6:	94 60       	ori	r25, 0x04	; 4
 8f8:	99 bf       	out	0x39, r25	; 57
 8fa:	01 c0       	rjmp	.+2      	; 0x8fe <__stack+0x9f>
 8fc:	80 e0       	ldi	r24, 0x00	; 0
 8fe:	91 e0       	ldi	r25, 0x01	; 1
 900:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <gu8_Timer1initFlag>
 904:	08 95       	ret
 906:	81 81       	ldd	r24, Z+1	; 0x01
 908:	81 30       	cpi	r24, 0x01	; 1
 90a:	21 f0       	breq	.+8      	; 0x914 <__stack+0xb5>
 90c:	68 f0       	brcs	.+26     	; 0x928 <__stack+0xc9>
 90e:	82 30       	cpi	r24, 0x02	; 2
 910:	31 f0       	breq	.+12     	; 0x91e <__stack+0xbf>
 912:	0f c0       	rjmp	.+30     	; 0x932 <__stack+0xd3>
 914:	87 e0       	ldi	r24, 0x07	; 7
 916:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <gu8_Prescaler>
 91a:	81 e0       	ldi	r24, 0x01	; 1
 91c:	0b c0       	rjmp	.+22     	; 0x934 <__stack+0xd5>
 91e:	86 e0       	ldi	r24, 0x06	; 6
 920:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <gu8_Prescaler>
 924:	81 e0       	ldi	r24, 0x01	; 1
 926:	06 c0       	rjmp	.+12     	; 0x934 <__stack+0xd5>
 928:	83 81       	ldd	r24, Z+3	; 0x03
 92a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <gu8_Prescaler>
 92e:	81 e0       	ldi	r24, 0x01	; 1
 930:	01 c0       	rjmp	.+2      	; 0x934 <__stack+0xd5>
 932:	80 e0       	ldi	r24, 0x00	; 0
 934:	92 81       	ldd	r25, Z+2	; 0x02
 936:	99 23       	and	r25, r25
 938:	19 f0       	breq	.+6      	; 0x940 <__stack+0xe1>
 93a:	91 30       	cpi	r25, 0x01	; 1
 93c:	29 f0       	breq	.+10     	; 0x948 <__stack+0xe9>
 93e:	08 c0       	rjmp	.+16     	; 0x950 <__stack+0xf1>
 940:	99 b7       	in	r25, 0x39	; 57
 942:	9f 7b       	andi	r25, 0xBF	; 191
 944:	99 bf       	out	0x39, r25	; 57
 946:	05 c0       	rjmp	.+10     	; 0x952 <__stack+0xf3>
 948:	99 b7       	in	r25, 0x39	; 57
 94a:	90 64       	ori	r25, 0x40	; 64
 94c:	99 bf       	out	0x39, r25	; 57
 94e:	01 c0       	rjmp	.+2      	; 0x952 <__stack+0xf3>
 950:	80 e0       	ldi	r24, 0x00	; 0
 952:	91 e0       	ldi	r25, 0x01	; 1
 954:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <gu8_Timer2initFlag>
 958:	08 95       	ret
 95a:	80 e0       	ldi	r24, 0x00	; 0
 95c:	08 95       	ret
 95e:	80 e0       	ldi	r24, 0x00	; 0
 960:	08 95       	ret
 962:	80 e0       	ldi	r24, 0x00	; 0
 964:	08 95       	ret

00000966 <Timer_Start>:
 966:	84 30       	cpi	r24, 0x04	; 4
 968:	08 f0       	brcs	.+2      	; 0x96c <Timer_Start+0x6>
 96a:	ae c0       	rjmp	.+348    	; 0xac8 <Timer_Start+0x162>
 96c:	81 30       	cpi	r24, 0x01	; 1
 96e:	d9 f1       	breq	.+118    	; 0x9e6 <Timer_Start+0x80>
 970:	20 f0       	brcs	.+8      	; 0x97a <Timer_Start+0x14>
 972:	82 30       	cpi	r24, 0x02	; 2
 974:	09 f4       	brne	.+2      	; 0x978 <Timer_Start+0x12>
 976:	6e c0       	rjmp	.+220    	; 0xa54 <Timer_Start+0xee>
 978:	a9 c0       	rjmp	.+338    	; 0xacc <Timer_Start+0x166>
 97a:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <gu8_Timer0initFlag>
 97e:	88 23       	and	r24, r24
 980:	09 f4       	brne	.+2      	; 0x984 <Timer_Start+0x1e>
 982:	a6 c0       	rjmp	.+332    	; 0xad0 <Timer_Start+0x16a>
 984:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <gu8_Prescaler>
 988:	82 30       	cpi	r24, 0x02	; 2
 98a:	b1 f0       	breq	.+44     	; 0x9b8 <Timer_Start+0x52>
 98c:	28 f4       	brcc	.+10     	; 0x998 <Timer_Start+0x32>
 98e:	88 23       	and	r24, r24
 990:	51 f0       	breq	.+20     	; 0x9a6 <Timer_Start+0x40>
 992:	81 30       	cpi	r24, 0x01	; 1
 994:	61 f0       	breq	.+24     	; 0x9ae <Timer_Start+0x48>
 996:	24 c0       	rjmp	.+72     	; 0x9e0 <Timer_Start+0x7a>
 998:	86 30       	cpi	r24, 0x06	; 6
 99a:	c1 f0       	breq	.+48     	; 0x9cc <Timer_Start+0x66>
 99c:	87 30       	cpi	r24, 0x07	; 7
 99e:	d9 f0       	breq	.+54     	; 0x9d6 <Timer_Start+0x70>
 9a0:	84 30       	cpi	r24, 0x04	; 4
 9a2:	f1 f4       	brne	.+60     	; 0x9e0 <Timer_Start+0x7a>
 9a4:	0e c0       	rjmp	.+28     	; 0x9c2 <Timer_Start+0x5c>
 9a6:	83 b7       	in	r24, 0x33	; 51
 9a8:	83 bf       	out	0x33, r24	; 51
 9aa:	81 e0       	ldi	r24, 0x01	; 1
 9ac:	1a c0       	rjmp	.+52     	; 0x9e2 <Timer_Start+0x7c>
 9ae:	83 b7       	in	r24, 0x33	; 51
 9b0:	81 60       	ori	r24, 0x01	; 1
 9b2:	83 bf       	out	0x33, r24	; 51
 9b4:	81 e0       	ldi	r24, 0x01	; 1
 9b6:	15 c0       	rjmp	.+42     	; 0x9e2 <Timer_Start+0x7c>
 9b8:	83 b7       	in	r24, 0x33	; 51
 9ba:	82 60       	ori	r24, 0x02	; 2
 9bc:	83 bf       	out	0x33, r24	; 51
 9be:	81 e0       	ldi	r24, 0x01	; 1
 9c0:	10 c0       	rjmp	.+32     	; 0x9e2 <Timer_Start+0x7c>
 9c2:	83 b7       	in	r24, 0x33	; 51
 9c4:	83 60       	ori	r24, 0x03	; 3
 9c6:	83 bf       	out	0x33, r24	; 51
 9c8:	81 e0       	ldi	r24, 0x01	; 1
 9ca:	0b c0       	rjmp	.+22     	; 0x9e2 <Timer_Start+0x7c>
 9cc:	83 b7       	in	r24, 0x33	; 51
 9ce:	84 60       	ori	r24, 0x04	; 4
 9d0:	83 bf       	out	0x33, r24	; 51
 9d2:	81 e0       	ldi	r24, 0x01	; 1
 9d4:	06 c0       	rjmp	.+12     	; 0x9e2 <Timer_Start+0x7c>
 9d6:	83 b7       	in	r24, 0x33	; 51
 9d8:	85 60       	ori	r24, 0x05	; 5
 9da:	83 bf       	out	0x33, r24	; 51
 9dc:	81 e0       	ldi	r24, 0x01	; 1
 9de:	01 c0       	rjmp	.+2      	; 0x9e2 <Timer_Start+0x7c>
 9e0:	80 e0       	ldi	r24, 0x00	; 0
 9e2:	62 bf       	out	0x32, r22	; 50
 9e4:	08 95       	ret
 9e6:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <gu8_Timer1initFlag>
 9ea:	88 23       	and	r24, r24
 9ec:	09 f4       	brne	.+2      	; 0x9f0 <Timer_Start+0x8a>
 9ee:	72 c0       	rjmp	.+228    	; 0xad4 <Timer_Start+0x16e>
 9f0:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <gu8_Prescaler>
 9f4:	82 30       	cpi	r24, 0x02	; 2
 9f6:	b1 f0       	breq	.+44     	; 0xa24 <Timer_Start+0xbe>
 9f8:	28 f4       	brcc	.+10     	; 0xa04 <Timer_Start+0x9e>
 9fa:	88 23       	and	r24, r24
 9fc:	51 f0       	breq	.+20     	; 0xa12 <Timer_Start+0xac>
 9fe:	81 30       	cpi	r24, 0x01	; 1
 a00:	61 f0       	breq	.+24     	; 0xa1a <Timer_Start+0xb4>
 a02:	24 c0       	rjmp	.+72     	; 0xa4c <Timer_Start+0xe6>
 a04:	86 30       	cpi	r24, 0x06	; 6
 a06:	c1 f0       	breq	.+48     	; 0xa38 <Timer_Start+0xd2>
 a08:	87 30       	cpi	r24, 0x07	; 7
 a0a:	d9 f0       	breq	.+54     	; 0xa42 <Timer_Start+0xdc>
 a0c:	84 30       	cpi	r24, 0x04	; 4
 a0e:	f1 f4       	brne	.+60     	; 0xa4c <Timer_Start+0xe6>
 a10:	0e c0       	rjmp	.+28     	; 0xa2e <Timer_Start+0xc8>
 a12:	8e b5       	in	r24, 0x2e	; 46
 a14:	8e bd       	out	0x2e, r24	; 46
 a16:	81 e0       	ldi	r24, 0x01	; 1
 a18:	1a c0       	rjmp	.+52     	; 0xa4e <Timer_Start+0xe8>
 a1a:	8e b5       	in	r24, 0x2e	; 46
 a1c:	81 60       	ori	r24, 0x01	; 1
 a1e:	8e bd       	out	0x2e, r24	; 46
 a20:	81 e0       	ldi	r24, 0x01	; 1
 a22:	15 c0       	rjmp	.+42     	; 0xa4e <Timer_Start+0xe8>
 a24:	8e b5       	in	r24, 0x2e	; 46
 a26:	82 60       	ori	r24, 0x02	; 2
 a28:	8e bd       	out	0x2e, r24	; 46
 a2a:	81 e0       	ldi	r24, 0x01	; 1
 a2c:	10 c0       	rjmp	.+32     	; 0xa4e <Timer_Start+0xe8>
 a2e:	8e b5       	in	r24, 0x2e	; 46
 a30:	83 60       	ori	r24, 0x03	; 3
 a32:	8e bd       	out	0x2e, r24	; 46
 a34:	81 e0       	ldi	r24, 0x01	; 1
 a36:	0b c0       	rjmp	.+22     	; 0xa4e <Timer_Start+0xe8>
 a38:	8e b5       	in	r24, 0x2e	; 46
 a3a:	84 60       	ori	r24, 0x04	; 4
 a3c:	8e bd       	out	0x2e, r24	; 46
 a3e:	81 e0       	ldi	r24, 0x01	; 1
 a40:	06 c0       	rjmp	.+12     	; 0xa4e <Timer_Start+0xe8>
 a42:	8e b5       	in	r24, 0x2e	; 46
 a44:	85 60       	ori	r24, 0x05	; 5
 a46:	8e bd       	out	0x2e, r24	; 46
 a48:	81 e0       	ldi	r24, 0x01	; 1
 a4a:	01 c0       	rjmp	.+2      	; 0xa4e <Timer_Start+0xe8>
 a4c:	80 e0       	ldi	r24, 0x00	; 0
 a4e:	7d bd       	out	0x2d, r23	; 45
 a50:	6c bd       	out	0x2c, r22	; 44
 a52:	08 95       	ret
 a54:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <gu8_Timer2initFlag>
 a58:	88 23       	and	r24, r24
 a5a:	f1 f1       	breq	.+124    	; 0xad8 <Timer_Start+0x172>
 a5c:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <gu8_Prescaler>
 a60:	8e 2f       	mov	r24, r30
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	88 30       	cpi	r24, 0x08	; 8
 a66:	91 05       	cpc	r25, r1
 a68:	60 f5       	brcc	.+88     	; 0xac2 <Timer_Start+0x15c>
 a6a:	fc 01       	movw	r30, r24
 a6c:	e6 5d       	subi	r30, 0xD6	; 214
 a6e:	ff 4f       	sbci	r31, 0xFF	; 255
 a70:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <__tablejump2__>
 a74:	85 b5       	in	r24, 0x25	; 37
 a76:	85 bd       	out	0x25, r24	; 37
 a78:	81 e0       	ldi	r24, 0x01	; 1
 a7a:	24 c0       	rjmp	.+72     	; 0xac4 <Timer_Start+0x15e>
 a7c:	85 b5       	in	r24, 0x25	; 37
 a7e:	81 60       	ori	r24, 0x01	; 1
 a80:	85 bd       	out	0x25, r24	; 37
 a82:	81 e0       	ldi	r24, 0x01	; 1
 a84:	1f c0       	rjmp	.+62     	; 0xac4 <Timer_Start+0x15e>
 a86:	85 b5       	in	r24, 0x25	; 37
 a88:	82 60       	ori	r24, 0x02	; 2
 a8a:	85 bd       	out	0x25, r24	; 37
 a8c:	81 e0       	ldi	r24, 0x01	; 1
 a8e:	1a c0       	rjmp	.+52     	; 0xac4 <Timer_Start+0x15e>
 a90:	85 b5       	in	r24, 0x25	; 37
 a92:	83 60       	ori	r24, 0x03	; 3
 a94:	85 bd       	out	0x25, r24	; 37
 a96:	81 e0       	ldi	r24, 0x01	; 1
 a98:	15 c0       	rjmp	.+42     	; 0xac4 <Timer_Start+0x15e>
 a9a:	85 b5       	in	r24, 0x25	; 37
 a9c:	84 60       	ori	r24, 0x04	; 4
 a9e:	85 bd       	out	0x25, r24	; 37
 aa0:	81 e0       	ldi	r24, 0x01	; 1
 aa2:	10 c0       	rjmp	.+32     	; 0xac4 <Timer_Start+0x15e>
 aa4:	85 b5       	in	r24, 0x25	; 37
 aa6:	85 60       	ori	r24, 0x05	; 5
 aa8:	85 bd       	out	0x25, r24	; 37
 aaa:	81 e0       	ldi	r24, 0x01	; 1
 aac:	0b c0       	rjmp	.+22     	; 0xac4 <Timer_Start+0x15e>
 aae:	85 b5       	in	r24, 0x25	; 37
 ab0:	86 60       	ori	r24, 0x06	; 6
 ab2:	85 bd       	out	0x25, r24	; 37
 ab4:	81 e0       	ldi	r24, 0x01	; 1
 ab6:	06 c0       	rjmp	.+12     	; 0xac4 <Timer_Start+0x15e>
 ab8:	85 b5       	in	r24, 0x25	; 37
 aba:	87 60       	ori	r24, 0x07	; 7
 abc:	85 bd       	out	0x25, r24	; 37
 abe:	81 e0       	ldi	r24, 0x01	; 1
 ac0:	01 c0       	rjmp	.+2      	; 0xac4 <Timer_Start+0x15e>
 ac2:	80 e0       	ldi	r24, 0x00	; 0
 ac4:	64 bd       	out	0x24, r22	; 36
 ac6:	08 95       	ret
 ac8:	80 e0       	ldi	r24, 0x00	; 0
 aca:	08 95       	ret
 acc:	80 e0       	ldi	r24, 0x00	; 0
 ace:	08 95       	ret
 ad0:	80 e0       	ldi	r24, 0x00	; 0
 ad2:	08 95       	ret
 ad4:	80 e0       	ldi	r24, 0x00	; 0
 ad6:	08 95       	ret
 ad8:	80 e0       	ldi	r24, 0x00	; 0
 ada:	08 95       	ret

00000adc <Timer_GetValue>:
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	
	ERROR_STATUS u8_status = E_OK;
	
		if (Timer_CH_NO > TIMER_CHANNEL_NUMBER)
 adc:	84 30       	cpi	r24, 0x04	; 4
 ade:	48 f5       	brcc	.+82     	; 0xb32 <Timer_GetValue+0x56>
		{
			u8_status = E_NOK;
		}
		else{
	         switch(Timer_CH_NO){
 ae0:	81 30       	cpi	r24, 0x01	; 1
 ae2:	79 f0       	breq	.+30     	; 0xb02 <Timer_GetValue+0x26>
 ae4:	18 f0       	brcs	.+6      	; 0xaec <Timer_GetValue+0x10>
 ae6:	82 30       	cpi	r24, 0x02	; 2
 ae8:	c9 f0       	breq	.+50     	; 0xb1c <Timer_GetValue+0x40>
 aea:	25 c0       	rjmp	.+74     	; 0xb36 <Timer_GetValue+0x5a>
	         	
	         	case TIMER_CH0:
	         			if (gu8_Timer0initFlag == NOT_INITIALIZED)
 aec:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <gu8_Timer0initFlag>
 af0:	88 23       	and	r24, r24
 af2:	19 f1       	breq	.+70     	; 0xb3a <Timer_GetValue+0x5e>
	         			{
	         				u8_status = E_NOK;
	         			}
	         			else{
	         				*Data = TCNT0;
 af4:	82 b7       	in	r24, 0x32	; 50
 af6:	90 e0       	ldi	r25, 0x00	; 0
 af8:	fb 01       	movw	r30, r22
 afa:	91 83       	std	Z+1, r25	; 0x01
 afc:	80 83       	st	Z, r24
 * 							
 */
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	
	ERROR_STATUS u8_status = E_OK;
 afe:	81 e0       	ldi	r24, 0x01	; 1
 b00:	08 95       	ret
	         				*Data = TCNT0;
	         			}
	         			break;
	         	
	         	case TIMER_CH1:
	         	       if (gu8_Timer1initFlag == NOT_INITIALIZED)
 b02:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <gu8_Timer1initFlag>
 b06:	88 23       	and	r24, r24
 b08:	d1 f0       	breq	.+52     	; 0xb3e <Timer_GetValue+0x62>
	         	       {
	         	       	u8_status = E_NOK;
	         	       }
	         	       else{
	         	       		*Data = (TCNT1H <<8 ) | TCNT1L;
 b0a:	2d b5       	in	r18, 0x2d	; 45
 b0c:	8c b5       	in	r24, 0x2c	; 44
 b0e:	90 e0       	ldi	r25, 0x00	; 0
 b10:	92 2b       	or	r25, r18
 b12:	fb 01       	movw	r30, r22
 b14:	91 83       	std	Z+1, r25	; 0x01
 b16:	80 83       	st	Z, r24
 * 							
 */
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	
	ERROR_STATUS u8_status = E_OK;
 b18:	81 e0       	ldi	r24, 0x01	; 1
 b1a:	08 95       	ret
	         	       		*Data = (TCNT1H <<8 ) | TCNT1L;
	         	       }
	         	       	break;
	         			   
	         	case TIMER_CH2:
                        if (gu8_Timer2initFlag == NOT_INITIALIZED)
 b1c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <gu8_Timer2initFlag>
 b20:	88 23       	and	r24, r24
 b22:	79 f0       	breq	.+30     	; 0xb42 <Timer_GetValue+0x66>
                        {
                        	u8_status = E_NOK;
                        }
                        else{
                        	*Data = TCNT2;
 b24:	84 b5       	in	r24, 0x24	; 36
 b26:	90 e0       	ldi	r25, 0x00	; 0
 b28:	fb 01       	movw	r30, r22
 b2a:	91 83       	std	Z+1, r25	; 0x01
 b2c:	80 83       	st	Z, r24
 * 							
 */
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	
	ERROR_STATUS u8_status = E_OK;
 b2e:	81 e0       	ldi	r24, 0x01	; 1
 b30:	08 95       	ret
	
		if (Timer_CH_NO > TIMER_CHANNEL_NUMBER)
		{
			u8_status = E_NOK;
 b32:	80 e0       	ldi	r24, 0x00	; 0
 b34:	08 95       	ret
                        else{
                        	*Data = TCNT2;
                        }			
	                 	break;
	         	default:
	         			u8_status = E_NOK;
 b36:	80 e0       	ldi	r24, 0x00	; 0
 b38:	08 95       	ret
	         switch(Timer_CH_NO){
	         	
	         	case TIMER_CH0:
	         			if (gu8_Timer0initFlag == NOT_INITIALIZED)
	         			{
	         				u8_status = E_NOK;
 b3a:	80 e0       	ldi	r24, 0x00	; 0
 b3c:	08 95       	ret
	         			break;
	         	
	         	case TIMER_CH1:
	         	       if (gu8_Timer1initFlag == NOT_INITIALIZED)
	         	       {
	         	       	u8_status = E_NOK;
 b3e:	80 e0       	ldi	r24, 0x00	; 0
 b40:	08 95       	ret
	         	       	break;
	         			   
	         	case TIMER_CH2:
                        if (gu8_Timer2initFlag == NOT_INITIALIZED)
                        {
                        	u8_status = E_NOK;
 b42:	80 e0       	ldi	r24, 0x00	; 0
	         			u8_status = E_NOK;
	         }
		}/*end of else */
		
	return u8_status;
}
 b44:	08 95       	ret

00000b46 <Us_Init>:
 *                                                                                                  *
 *                                                                                                  *
 ***************************************************************************************************/

ERROR_STATUS Us_Init(void)
{
 b46:	cf 93       	push	r28
 b48:	df 93       	push	r29
 b4a:	00 d0       	rcall	.+0      	; 0xb4c <Us_Init+0x6>
 b4c:	00 d0       	rcall	.+0      	; 0xb4e <Us_Init+0x8>
 b4e:	1f 92       	push	r1
 b50:	cd b7       	in	r28, 0x3d	; 61
 b52:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATUS status = E_OK;
	
	/* initialize pin3 as output */
	DIO_Cfg_s str_Dio = {
 b54:	81 e0       	ldi	r24, 0x01	; 1
 b56:	89 83       	std	Y+1, r24	; 0x01
 b58:	88 e0       	ldi	r24, 0x08	; 8
 b5a:	8a 83       	std	Y+2, r24	; 0x02
 b5c:	8f ef       	ldi	r24, 0xFF	; 255
 b5e:	8b 83       	std	Y+3, r24	; 0x03
		GPIOB,
		PIN3,
		OUTPUT
	};
	status = 	DIO_init(&str_Dio);
 b60:	ce 01       	movw	r24, r28
 b62:	01 96       	adiw	r24, 0x01	; 1
 b64:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_init>
	

	/* initialize icu on EXT INT2 and timer0 */
	Icu_cfg_s str_Icu = {
 b68:	82 e0       	ldi	r24, 0x02	; 2
 b6a:	8c 83       	std	Y+4, r24	; 0x04
 b6c:	1d 82       	std	Y+5, r1	; 0x05
	ICU_CH2,
	ICU_TIMER_CH0
	};
	status = Icu_Init(&str_Icu);
 b6e:	ce 01       	movw	r24, r28
 b70:	04 96       	adiw	r24, 0x04	; 4
 b72:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Icu_Init>
	
	return status;
}
 b76:	0f 90       	pop	r0
 b78:	0f 90       	pop	r0
 b7a:	0f 90       	pop	r0
 b7c:	0f 90       	pop	r0
 b7e:	0f 90       	pop	r0
 b80:	df 91       	pop	r29
 b82:	cf 91       	pop	r28
 b84:	08 95       	ret

00000b86 <Us_Trigger>:

ERROR_STATUS Us_Trigger(void)
{
	ERROR_STATUS status = E_OK;
	/* Trigger pulse */
	status =  DIO_Write(GPIOB, PIN3, HIGH);
 b86:	4f ef       	ldi	r20, 0xFF	; 255
 b88:	68 e0       	ldi	r22, 0x08	; 8
 b8a:	81 e0       	ldi	r24, 0x01	; 1
 b8c:	0e 94 04 01 	call	0x208	; 0x208 <DIO_Write>
	softwareDelayMs(1);
 b90:	61 e0       	ldi	r22, 0x01	; 1
 b92:	70 e0       	ldi	r23, 0x00	; 0
 b94:	80 e0       	ldi	r24, 0x00	; 0
 b96:	90 e0       	ldi	r25, 0x00	; 0
 b98:	0e 94 b8 03 	call	0x770	; 0x770 <softwareDelayMs>
	status =  DIO_Write(GPIOB, PIN3, LOW);
 b9c:	40 e0       	ldi	r20, 0x00	; 0
 b9e:	68 e0       	ldi	r22, 0x08	; 8
 ba0:	81 e0       	ldi	r24, 0x01	; 1
 ba2:	0e 94 04 01 	call	0x208	; 0x208 <DIO_Write>
	return status;
}
 ba6:	08 95       	ret

00000ba8 <Us_GetDistance>:
 *                    Distance parameter.                                                         *
 *************************************************************************************************/


ERROR_STATUS Us_GetDistance(uint8_t *Distance)
{
 ba8:	cf 93       	push	r28
 baa:	df 93       	push	r29
 bac:	ec 01       	movw	r28, r24
	ERROR_STATUS u8_status = E_OK;
	u8_status =  Icu_ReadTime(ICU_TIMER_CH0, ICU_RISE_TO_FALL , Distance);
 bae:	ac 01       	movw	r20, r24
 bb0:	61 e0       	ldi	r22, 0x01	; 1
 bb2:	80 e0       	ldi	r24, 0x00	; 0
 bb4:	0e 94 28 02 	call	0x450	; 0x450 <Icu_ReadTime>
		
		
		/*58 to map time to distance */
		*Distance = *Distance / 58;
 bb8:	98 81       	ld	r25, Y
 bba:	96 95       	lsr	r25
 bbc:	27 e4       	ldi	r18, 0x47	; 71
 bbe:	92 9f       	mul	r25, r18
 bc0:	91 2d       	mov	r25, r1
 bc2:	11 24       	eor	r1, r1
 bc4:	96 95       	lsr	r25
 bc6:	96 95       	lsr	r25
 bc8:	96 95       	lsr	r25
 bca:	98 83       	st	Y, r25
	//PORTD_DATA = *Distance;
	
	return u8_status;
}
 bcc:	df 91       	pop	r29
 bce:	cf 91       	pop	r28
 bd0:	08 95       	ret

00000bd2 <__tablejump2__>:
 bd2:	ee 0f       	add	r30, r30
 bd4:	ff 1f       	adc	r31, r31
 bd6:	05 90       	lpm	r0, Z+
 bd8:	f4 91       	lpm	r31, Z
 bda:	e0 2d       	mov	r30, r0
 bdc:	09 94       	ijmp

00000bde <_exit>:
 bde:	f8 94       	cli

00000be0 <__stop_program>:
 be0:	ff cf       	rjmp	.-2      	; 0xbe0 <__stop_program>
